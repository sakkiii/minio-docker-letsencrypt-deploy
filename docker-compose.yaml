version: '3.7'

# Settings and configurations that are common for all minio{1...4} containers
x-minio-common: &minio-common
  image: minio/minio:RELEASE.2022-12-12T19-27-27Z
  command: server http://minio{1...4}/data{1...2} --console-address ":9001"
  expose:
    - "9000"
    - "9001"
  environment:
    MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
    MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASS:-minio123}
    MINIO_REGION_NAME: ${MINIO_REGION_NAME}
    MINIO_BROWSER_REDIRECT_URL: https://${FQDN}
    MINIO_PROMETHEUS_AUTH_TYPE: "public"
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    interval: 30s
    timeout: 20s
    retries: 3

# starts 4 docker containers running minio server instances.
# using nginx reverse proxy, load balancing, you can access
# it through default port 9000.
services:
  minio1:
    <<: *minio-common
    hostname: minio1
    volumes:
      - data1-1:/data1
      - data1-2:/data2

  minio2:
    <<: *minio-common
    hostname: minio2
    volumes:
      - data2-1:/data1
      - data2-2:/data2

  minio3:
    <<: *minio-common
    hostname: minio3
    volumes:
      - data3-1:/data1
      - data3-2:/data2

  minio4:
    <<: *minio-common
    hostname: minio4
    volumes:
      - data4-1:/data1
      - data4-2:/data2

  nginx:
    image: nginx:stable-alpine
    volumes:
      - ./nginx/conf.d:/etc/nginx/templates:ro
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    environment:
      - NGINX_HOST=${FQDN}
    ports:
      - "443:443"
      - "9000:9000"
    depends_on:
      - minio1
      - minio2
      - minio3
      - minio4
      - grafana
      - certbot
    restart: always

  certbot:
    image: certbot/certbot
    ports:
      - "80:80"
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    command: certonly --standalone --email ${CERTBOT_EMAIL} --agree-tos --no-eff-email -d ${FQDN}

  prometheus:
    image: prom/prometheus:latest
    expose:
      - 9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=48h
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: on-failure

  grafana:
    image: grafana/grafana:8.4.11
    expose:
      - 3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards:/etc/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/dashboards/minio-overview.json
      - GF_SERVER_ROOT_URL=https://${FQDN}/grafana
    depends_on:
      - prometheus
    restart: unless-stopped

  myvault:
    image: vault:1.7.3
    expose:
    - 3000
    volumes:
      - vault_file:/vault/file
      - ./vault:/vault/config:rw
    cap_add:
      - IPC_LOCK
    entrypoint: vault server -config=/vault/config/vault-config.json

## By default this config uses default local driver,
## For custom volumes replace with volume driver configuration.
volumes:
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  data3-1:
  data3-2:
  data4-1:
  data4-2:
  certbot-etc:
  certbot-var:
  grafana_data:
  prometheus_data:
  vault_file:
